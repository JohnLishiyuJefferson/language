pipeline {
    agent none  // 使用 agent none，表示不在 Jenkins 主机上运行，而是在指定的节点上运行

    environment {
        IMAGE_NAME = 'ghcr.io/johnlishiyujefferson/my-react'  // Docker 镜像的名称
        TAG = "${GIT_COMMIT}-${BUILD_TIMESTAMP}"  // 镜像标签：Git 提交哈希与时间戳
        LATEST_TAG = 'latest'  // latest 标签
    }

    stages {
        stage('Prepare') {
            steps {
                script {
                    env.GIT_COMMIT = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()  // 获取 Git 提交哈希值
                    env.BUILD_TIMESTAMP = sh(returnStdout: true, script: 'date +%Y%m%d%H%M%S').trim()  // 获取当前时间戳
                    echo "Git Commit: ${env.GIT_COMMIT}"
                    echo "Build Timestamp: ${env.BUILD_TIMESTAMP}"
                    echo "Tag: ${env.TAG}"
                    echo "Latest Tag: ${env.LATEST_TAG}"
                }
            }
        }

        stage('Checkout') {
            steps {
                echo 'Checking out code from repository...'
                checkout scm  // 拉取代码
            }
        }

        stage('Build Docker Image on Host') {
            agent { label 'docker-node' }  // 确保构建任务在宿主机上执行
            steps {
                echo 'Building Docker image from Dockerfile on host...'
                script {
                    // 确保宿主机上的 Docker 客户端可用
                    sh "docker build -t ${IMAGE_NAME}:${TAG} ."
                    sh "docker build -t ${IMAGE_NAME}:${LATEST_TAG} ."
                }
            }
        }

        stage('Push Docker Image') {
            agent { label 'docker-node' }  // 同样让推送镜像的任务在宿主机上执行
            steps {
                echo 'Pushing Docker image to registry on host...'
                script {
                    withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                        sh """
                            echo ${GITHUB_TOKEN} | docker login ghcr.io -u JohnLishiyuJefferson --password-stdin
                            docker push ${IMAGE_NAME}:${TAG}
                            docker push ${IMAGE_NAME}:${LATEST_TAG}
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Build Success!'
        }
        failure {
            echo 'Build Failed!'
        }
    }
}
